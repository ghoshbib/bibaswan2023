{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "azureeventgridpublish_1_Connection_Name": {
      "type": "string",
      "defaultValue": "EliTMessageHandlerTopic"
    },
    "azureeventgridpublish_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "ElitMessageHandlerTopic"
    },
    "azureeventgridpublish_1_endpoint": {
      "type": "string",
      "metadata": {
        "description": "DNS endpoint for the application topic for events."
      },
      "defaultValue": "https://elitmessagehandlertopicdev.northeurope-1.eventgrid.azure.net/api/events"
    },
    "azureeventgridpublish_1_api_key": {
      "type": "securestring",
      "metadata": {
        "description": "Primary or secondary key for the application topic."
      }
    },
    "azureeventgrid_1_Connection_Name": {
      "type": "string",
      "defaultValue": "SubmitText"
    },
    "azureeventgrid_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "SubmitText"
    },
    "azureeventgrid_1_token:clientId": {
      "type": "string",
      "metadata": {
        "description": "Client (or Application) ID of the Azure Active Directory application."
      },
      "defaultValue": "46a4ad0b-bc1c-4df6-bfb4-06a9e0cec7af"
    },
    "azureeventgrid_1_token:clientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Client secret of the Azure Active Directory application."
      }
    },
    "azureeventgrid_1_token:TenantId": {
      "type": "string",
      "metadata": {
        "description": "The tenant ID of for the Azure Active Directory application."
      },
      "defaultValue": "2f73e501-3af3-4b71-a8ac-04ea8198a9dc"
    },
    "azureeventgrid_1_token:grantType": {
      "type": "string",
      "metadata": {
        "description": "Grant type"
      },
      "defaultValue": "client_credentials",
      "allowedValues": [
        "code",
        "client_credentials"
      ]
    },
    "LogicAppLocation": {
      "type": "string",
      "minLength": 1,
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ],
      "defaultValue": "northeurope"
    },
    "triggerTopic": {
      "type": "string",
      "defaultValue": ""
    },
    "appinsightsUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "integrationTopicUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "integrationsaskey": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {},
  "resources": [
    {
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "For_each": {
              "type": "Foreach",
              "foreach": "@triggerBody()['Data']['msgListSubmitTextAssessment']",
              "actions": {
                "Send_to_Integration_Has_Failed_or_Timedout": {
                  "type": "Scope",
                  "actions": {
                    "Log_to_AppInsights_Failure": {
                      "type": "Function",
                      "inputs": {
                        "body": "@variables('LogMessage')",
                        "function": {
                          "id": "[parameters('appinsightsUrl')]"
                        }
                      },
                      "runAfter": {
                        "Set_variable_for_Failure": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Publish_Event_to_Exception_Handler_for_Integration": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureeventgridpublish_1']['connectionId']"
                          }
                        },
                        "method": "post",
                        "body": [
                          {
                            "data": {
                              "ErrorCode": "@outputs('Submit_Text_to_Integration_EventGrid')['statusCode']",
                              "ErrorMessage": "Technical error into the Intergration Layer",
                              "IsExceptionRaised": "N",
                              "IsSentForArchive": "N",
                              "MessageId": "@items('For_each')['messageId']",
                              "PartitionKey": "@items('For_each')['textId']",
                              "RowKey": "@items('For_each')['textId']",
                              "Status": "SendToIntegrationFailure",
                              "TextId": "@items('For_each')['textId']"
                            },
                            "eventTime": "@{utcNow()}",
                            "eventType": "Submit Text",
                            "id": "@{guid()}",
                            "subject": "Submit Text"
                          }
                        ],
                        "path": "/eventGrid/api/events"
                      },
                      "runAfter": {
                        "Log_to_AppInsights_Failure": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Set_variable_for_Failure": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "LogMessage",
                        "value": "{\n\"eventId\":\"@{guid()}\",\n\"messageId\":\"@{items('For_each')['messageId']}\",\n     \"source\":\"Metrica\", \n\"interfaceName\":\"Submit Text\",\n   \"context\":\"@{items('For_each')['messageId']}\", \n     \"contextType\":\"Text Id\",   \n   \"action\":\"Submit Text\",    \n  \"status\":\"Failure\",\n      \"statusCode\":@{outputs('Submit_Text_to_Integration_EventGrid')['statusCode']},   \n   \"message\":{},   \n   \"messageType\":\"Exception\",\n      \"workflowID\":\"@{workflow()['run']['name']}\",     \n \"dateTime\":\"@{utcNow()}\"\n}"
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "Submit_Text_to_Integration_EventGrid": [
                      "Failed",
                      "TimedOut"
                    ]
                  }
                },
                "Send_to_Integration_Succeeded": {
                  "type": "Scope",
                  "actions": {
                    "Log_to_AppInsights_Success": {
                      "type": "Function",
                      "inputs": {
                        "body": "@variables('LogMessage')",
                        "function": {
                          "id": "[parameters('appinsightsUrl')]"
                        }
                      },
                      "runAfter": {
                        "Set_variable_for_Success": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Set_variable_for_Success": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "LogMessage",
                        "value": "{\n\"eventId\":\"@{guid()}\",\n\"messageId\":\"@{items('For_each')['messageId']}\",\n    \"source\":\"Metrica\", \n\"interfaceName\":\"Submit Text\",\n   \"context\":\"@{items('For_each')['textId']}\", \n     \"contextType\":\"Text Id\",   \n   \"action\":\"Submit Text\",    \n  \"status\":\"Success\",\n      \"statusCode\":@{outputs('Submit_Text_to_Integration_EventGrid')['statusCode']},    \n   \"message\":{},   \n   \"messageType\":\"Success\",\n      \"workflowID\":\"@{workflow()['run']['name']}\",     \n \"dateTime\":\"@{utcNow()}\"\n}"
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "Submit_Text_to_Integration_EventGrid": [
                      "Succeeded"
                    ]
                  }
                },
                "Submit_Text_to_Integration_EventGrid": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "[parameters('integrationTopicUrl')]",
                    "headers": {
                      "aeg-sas-key": "[parameters('integrationsaskey')]"
                    },
                    "body": [
                      {
                        "Data": "@items('For_each')",
                        "EventTime": "@utcNow()",
                        "EventType": "Submit Text Assessment",
                        "Id": "@guid()",
                        "Subject": "Submit Text"
                      }
                    ]
                  },
                  "runAfter": {}
                }
              },
              "runAfter": {
                "Initialize_variable_for_LogMessage": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_variable_for_LogMessage": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "LogMessage",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {}
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_resource_event_occurs": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureeventgrid']['connectionId']"
                  }
                },
                "body": {
                  "properties": {
                    "topic": "[parameters('triggerTopic')]",
                    "destination": {
                      "endpointType": "webhook",
                      "properties": {
                        "endpointUrl": "@{listCallbackUrl()}"
                      }
                    }
                  }
                },
                "path": "/subscriptions/@{encodeURIComponent('2c903d74-e077-4eb2-8c79-c2f78c078c90')}/providers/@{encodeURIComponent('Microsoft.EventGrid.Topics')}/resource/eventSubscriptions",
                "queries": {
                  "x-ms-api-version": "2017-06-15-preview",
                  "subscriptionName": "SubmitText"
                }
              },
              "splitOn": "@triggerBody()"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureeventgridpublish_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('LogicAppLocation'), '/managedApis/', 'azureeventgridpublish')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('azureeventgridpublish_1_Connection_Name'))]",
                "connectionName": "[parameters('azureeventgridpublish_1_Connection_Name')]"
              },
              "azureeventgrid": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('LogicAppLocation'), '/managedApis/', 'azureeventgrid')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('azureeventgrid_1_Connection_Name'))]",
                "connectionName": "[parameters('azureeventgrid_1_Connection_Name')]"
              }
            }
          }
        }
      },
      "name": "SubmitText",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('LogicAppLocation')]",
      "apiVersion": "2016-06-01",
      "tags": {
        "displayName": "LogicApp"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('azureeventgridpublish_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('azureeventgrid_1_Connection_Name'))]"
      ]
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('azureeventgridpublish_1_Connection_Name')]",
      "location": "[parameters('LogicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('LogicAppLocation'), '/managedApis/', 'azureeventgridpublish')]"
        },
        "displayName": "[parameters('azureeventgridpublish_1_Connection_DisplayName')]",
        "parameterValues": {
          "endpoint": "[parameters('azureeventgridpublish_1_endpoint')]",
          "api_key": "[parameters('azureeventgridpublish_1_api_key')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('azureeventgrid_1_Connection_Name')]",
      "location": "[parameters('LogicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('LogicAppLocation'), '/managedApis/', 'azureeventgrid')]"
        },
        "displayName": "[parameters('azureeventgrid_1_Connection_DisplayName')]",
        "parameterValues": {
          "token:clientId": "[parameters('azureeventgrid_1_token:clientId')]",
          "token:clientSecret": "[parameters('azureeventgrid_1_token:clientSecret')]",
          "token:TenantId": "[parameters('azureeventgrid_1_token:TenantId')]",
          "token:grantType": "[parameters('azureeventgrid_1_token:grantType')]"
        }
      }
    }
  ],
  "outputs": {}
}